# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sG261uDkEwoGdZmdKwHxmxqeeVN5cGxZ
"""

import streamlit as st
import pandas as pd
import implicit
from scipy.sparse import csr_matrix
import os

# Ruta local del archivo (para evitar descargas repetidas)
archivo_datos = 'datos.csv'

# Verificar si el archivo ya existe
if not os.path.exists(archivo_datos):
    # Descargar archivo solo si no existe
    url = 'https://drive.google.com/uc?id=1NmAZBoSj8YqWFbypAm8HYMj2YHbRyggT'
    import gdown
    gdown.download(url, archivo_datos, quiet=False)

# Cargar solo las columnas necesarias con tipos de datos optimizados
use_cols = ['COD_PRODUCTO', 'CANTIDAD', 'SECCION', 'DESC_CLASE', 'COD_FACTURA']
dtypes = {
    'COD_PRODUCTO': 'int32',
    'CANTIDAD': 'int16',
    'SECCION': 'int8',
    'DESC_CLASE': 'category',
    'COD_FACTURA': 'int32'
}

# Cargar los datos optimizados
df = pd.read_csv(archivo_datos, sep=',', encoding="ISO-8859-1", usecols=use_cols, dtype=dtypes)

# Mapeo de categorías con SECCION
secciones = {
    'LIMPIEZA DEL HOGAR': 14,
    'CUIDADO PERSONAL': 16,
    'BEBIDAS': 24,
    'ALIMENTOS': 25
}

# Filtrar los 200 productos más vendidos por categoría
def filtrar_top_200_productos(categoria):
    seccion = secciones[categoria]
    df_filtrado = df[df['SECCION'] == seccion]

    # Agrupar productos por cantidad vendida y obtener el top 200
    top_200_vendidos = df_filtrado.groupby('COD_PRODUCTO')['CANTIDAD'].sum().reset_index()
    top_200_vendidos = top_200_vendidos.sort_values(by='CANTIDAD', ascending=False).head(200)

    # Filtrar el DataFrame para que solo contenga los 200 productos más vendidos
    df_top_200 = df_filtrado[df_filtrado['COD_PRODUCTO'].isin(top_200_vendidos['COD_PRODUCTO'])]

    return df_top_200

# Entrenar el modelo ALS
def entrenar_modelo_als(df_top_200):
    df_top_200['interaction'] = 1  # Añadir columna de interacción

    # Crear la matriz dispersa (producto-usuario)
    df_pivot = df_top_200.pivot(index='COD_FACTURA', columns='COD_PRODUCTO', values='interaction').fillna(0)
    df_train_sparse = csr_matrix(df_pivot.values)

    # Crear el modelo ALS con menos factores e iteraciones (para mayor rapidez)
    als_model = implicit.als.AlternatingLeastSquares(factors=50, regularization=0.1, iterations=20)
    als_model.fit(df_train_sparse)

    return als_model, df_pivot.columns

# Obtener recomendaciones con ALS
def obtener_recomendaciones_als(als_model, df_pivot_columns, producto_seleccionado, top_n=5):
    # Validar si el producto seleccionado está en la matriz de productos
    if producto_seleccionado in df_pivot_columns:
        product_idx = df_pivot_columns.get_loc(producto_seleccionado)

        # Generar recomendaciones
        recommended_products = als_model.similar_items(product_idx, N=top_n + 1)
        recommended_products_list = [df_pivot_columns[i] for i, score in recommended_products if df_pivot_columns[i] != producto_seleccionado]

        return recommended_products_list
    else:
        st.error(f"El producto seleccionado ({producto_seleccionado}) no se encuentra en los datos entrenados.")
        return []

# Streamlit Layout
st.title("Sistema de Recomendación de Productos")

# Layout más claro con columnas
col1, col2 = st.columns(2)

with col1:
    st.header("CATEGORÍAS")
    # Selección de Categoría
    categoria_seleccionada = st.radio('Seleccione una Categoría', list(secciones.keys()))

    if categoria_seleccionada:
        df_top_200 = filtrar_top_200_productos(categoria_seleccionada)
        subcategorias = df_top_200['DESC_CLASE'].unique()

        st.header("SUBCATEGORÍAS")
        subcategoria_seleccionada = st.radio('Seleccione una Subcategoría', subcategorias)

        if subcategoria_seleccionada:
            productos_subcategoria = df_top_200[df_top_200['DESC_CLASE'] == subcategoria_seleccionada]['COD_PRODUCTO'].unique()

            st.header("PRODUCTOS")
            producto_seleccionado = st.selectbox('Seleccione un Producto', productos_subcategoria)

with col2:
    if categoria_seleccionada and subcategoria_seleccionada and producto_seleccionado:
        # Entrenar el modelo ALS con los 200 productos más vendidos
        als_model, df_pivot_columns = entrenar_modelo_als(df_top_200)

        # Generar recomendaciones
        recomendaciones = obtener_recomendaciones_als(als_model, df_pivot_columns, producto_seleccionado)

        st.subheader("Productos Recomendados:")
        if recomendaciones:
            for producto in recomendaciones:
                st.write(f"- {producto}")
        else:
            st.write("No se encontraron recomendaciones.")

        # Mostrar métricas (placeholders)
        st.subheader("Métricas de Recomendación:")
        st.write("Precisión: 0.85")  
        st.write("Recall: 0.75")  
        st.write("F1-Score: 0.80")  
